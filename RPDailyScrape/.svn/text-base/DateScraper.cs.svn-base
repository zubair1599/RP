using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Net;
using System.Text.RegularExpressions;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace RPDailyScrape
{
    class DateScraper
    {
        private static RacingPostRacesDataContext db_rph;

        public static void ScrapeDates(DateTime to_date) {
            Common.rand = new Random();
            db_rph = new RacingPostRacesDataContext(ConfigurationManager.ConnectionStrings["ScrapeRP"].ToString());

            //todo change LastDateScraped on 240 server
            //todo new scraperace structure on 240 server
            //todo amend ScrapeRaceView
            var date_scrape = db_rph.ScrapeCourses.Select(x => x.LastDateScraped).FirstOrDefault();
            if (date_scrape == null) {
                Logger.WriteLog("Last date scraped missing");
                Environment.Exit(-1);
            }
            else {
                date_scrape = date_scrape.AddDays(1);
            }

            while (date_scrape < to_date) {
                Logger.WriteLog("Scraping " + date_scrape.ToShortDateString());

                var status = "";
                var page = "";
                GetDate(date_scrape, ref status, ref page);

                if (status == "Complete") {
                    ScrapeDatePage(page, date_scrape);
                    RaceScraper.ScrapeRaces();
                    HorseScraper.ScrapeHorses();
                }
                else {
                    Logger.WriteLog("Page retrieval failed: " + status);
                    Environment.Exit(-1);
                }

                var scr_rec = db_rph.ScrapeCourses.FirstOrDefault();
                if (scr_rec == null) {
                    scr_rec = new ScrapeCourse();
                    db_rph.ScrapeCourses.InsertOnSubmit(scr_rec);
                }
                scr_rec.LastDateScraped = date_scrape;
                db_rph.SubmitChanges();

                Common.Wait();
                date_scrape = date_scrape.AddDays(1);
                db_rph = new RacingPostRacesDataContext(ConfigurationManager.ConnectionStrings["ScrapeRP"].ToString());
            }
        }

        private static void ScrapeDatePage(string page, DateTime date) {
            string meeting_head = "";
            string meeting_tail = "";
            string races = "";

            var regex_meeting = new Regex(@"<table class=""raceHead\"">(.*?)</table>(.*?)<table class=""resultGrid"">(.*?)</table>", RegexOptions.Singleline);
            var match_meeting = regex_meeting.Match(page);
            while (match_meeting.Success) {
                meeting_head = match_meeting.Groups[1].ToString();
                meeting_tail = match_meeting.Groups[2].ToString();
                races = match_meeting.Groups[3].ToString();

                var regex_course = new Regex(@"<a href=""http://www.racingpost.com/horses/course_home.sd\?crs_id=(\d+)[^>]+>([^<]+)</a>");
                var match_course = regex_course.Match(meeting_head);
                if (match_course.Success) {
                    int course_id = Convert.ToInt32(match_course.Groups[1].ToString());
                    string course_whole = match_course.Groups[2].ToString().Replace("(AW)", ":AW:");

                    string course = "";
                    string country = "";
                    var regex_course2 = new Regex(@"([^(]+)(\([^(]+\)){0,1}");
                    var match_course2 = regex_course2.Match(course_whole);
                    if (match_course2.Success) {
                        course = match_course2.Groups[1].ToString().Replace(":AW:", "(AW)").Trim();
                        country = match_course2.Groups[2].ToString().Replace("(", "").Replace(")", "").Trim();
                    }

                    string going = "";
                    var regex_going = new Regex(@"<strong>GOING:</strong>([^<\n]+)", RegexOptions.Singleline);
                    var match_going = regex_going.Match(meeting_tail);
                    if (match_going.Success) {
                        going = match_going.Groups[1].ToString().Trim();
                    }

                    string weather = "";
                    var regex_weather = new Regex(@"<strong>Weather conditions:</strong>([^<\n]+)", RegexOptions.Singleline);
                    var match_weather = regex_weather.Match(meeting_tail);
                    if (match_weather.Success) {
                        weather = match_weather.Groups[1].ToString().Trim();
                    }

                    string stalls = "";
                    var regex_stalls = new Regex(@"<strong>STALLS:</strong>([^<\n]+)", RegexOptions.Singleline);
                    var match_stalls = regex_stalls.Match(meeting_tail);
                    if (match_stalls.Success) {
                        stalls = match_stalls.Groups[1].ToString().Trim();
                    }

                    var course_rec = db_rph.Courses.Where(x => x.Id == course_id).FirstOrDefault();
                    if (course_rec == null) {
                        course_rec = new Course();
                        course_rec.Id = course_id;
                        db_rph.Courses.InsertOnSubmit(course_rec);
                    }

                    course_rec.Name = course;
                    course_rec.Country = country;
                    db_rph.SubmitChanges();

                    var meeting_rec = db_rph.Meetings.Where(x => x.CourseId == course_id && x.DateOfMeeting == date).FirstOrDefault();
                    if (meeting_rec != null) {
                        var cmd = String.Format("DELETE FROM Meeting WHERE Id = {0}", meeting_rec.Id);
                        db_rph.ExecuteCommand(cmd);
                        cmd = String.Format("DELETE FROM ScrapeRace WHERE MeetingId = {0}", meeting_rec.Id);
                        db_rph.ExecuteCommand(cmd);
                    }

                    meeting_rec = new Meeting();
                    db_rph.Meetings.InsertOnSubmit(meeting_rec);
                    meeting_rec.CourseId = course_id;
                    meeting_rec.DateOfMeeting = date;
                    meeting_rec.Going = going;
                    meeting_rec.Weather = weather;
                    meeting_rec.Stalls = stalls;
                    db_rph.SubmitChanges();

                    var regex_race = new Regex(@"<td(.*?)</td>", RegexOptions.Singleline);
                    var match_race = regex_race.Match(races);
                    while (match_race.Success) {
                        var race = match_race.Groups[1].ToString();

                        string race_link = "";
                        int race_id = 0;
                        var regex_race_link = new Regex(@"<a href=""(/horses/result_home\.sd\?race_id=(\d+)[^""]+)""", RegexOptions.Singleline);
                        var match_race_link = regex_race_link.Match(race);
                        if (match_race_link.Success) {
                            race_link = match_race_link.Groups[1].ToString().Trim();
                            race_id = Convert.ToInt32(match_race_link.Groups[2].ToString().Trim());

                            var race_rec = new ScrapeRace();
                            db_rph.ScrapeRaces.InsertOnSubmit(race_rec);
                            race_rec.MeetingId = meeting_rec.Id;
                            race_rec.Link = "http://www.racingpost.com" + race_link;
                            race_rec.Scraped = false;
                            race_rec.RaceId = race_id;
                            race_rec.RaceDate = date;

                            db_rph.SubmitChanges();
                        }

                        match_race = match_race.NextMatch();
                    }
                }

                match_meeting = match_meeting.NextMatch();
            }
        }

        private static void GetDate(DateTime date, ref string status, ref string page) {
            var uri = new Uri(String.Format("http://www.racingpost.com/horses2/results/home.sd?r_date={0}", date.ToString("yyyy-MM-dd")));
            var request = (HttpWebRequest)WebRequest.Create(uri);
            request.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";
            request.Referer = "";
            request.Timeout = 30000;
            request.Method = "GET";

            try {
                var response = (HttpWebResponse)request.GetResponse();
                var stream = response.GetResponseStream();
                Encoding enc = Encoding.GetEncoding(28591);             // iso-8859-1
                var reader = new StreamReader(stream, enc);
                page = reader.ReadToEnd();
                reader.Close();
                stream.Close();

                status = "Complete";
            }
            catch (WebException webexcpt) {
                switch (webexcpt.Status) {
                    case WebExceptionStatus.NameResolutionFailure:
                        status = "Host name not resolved";
                        break;
                    case WebExceptionStatus.Timeout:
                        status = "Timeout";
                        break;
                    case WebExceptionStatus.ProtocolError:
                        if (webexcpt.Message.IndexOf("404") != 0) {
                            status = "Page not found";
                        }
                        else {
                            status = "Other error" + webexcpt.Message;
                        }
                        break;
                    default:
                        status = "Other error " + webexcpt.Message;
                        break;
                }
            }
        }

    }
}
